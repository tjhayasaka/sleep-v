#!/usr/bin/env ruby

$suffix_to_seconds = {
  "" => 1,
  "s" => 1,
  "m" => 60,
  "h" => 3600,
  "d" => 3600 * 24
}

def usage_exit(code)
  raise "exit (code = #{code})" if ENV["SLEEP_V_RDOCTEST"]

  valid_suffixes = $suffix_to_seconds.keys

  $stderr.puts <<EOS
usage: #{$0} [-h|--help] [-n|--dry-run] NUMBER[SUFFIX]..."

suffix must be one of #{valid_suffixes.inspect}

example:
    $ sleep-v 1.5; echo X # sleeps 1.5 seconds
    1X

    $ sleep-v 13; echo X # sleeps 13 seconds
    ::987654321X

    $ sleep-v 1h 23m 45.67; echo X # sleeps 5025.67 seconds (== 83 mins + 45.67 secs)
    83m80m75m70m65m60m55m50m45m40m35m30m25m20m15m10m9m8m7m6m5m4m3m2m1m::::::987654321X
EOS

  exit code
end


# to test with rdoctest:
#   $ gem install rdoctest
#   $ SLEEP_V_RDOCTEST=1 rdoctest -I. sleep-v

def expect_exception()
  begin
    yield
    raise "no exceptions raised while it's expected"
  rescue RuntimeError => ex
    ex.message
  end
end

# on regular step:
#   next_time_step(1) # => ["1", 1]
#   next_time_step(2) # => ["2", 1]
#   next_time_step(8) # => ["8", 1]
#   next_time_step(9) # => ["9", 1]
#   next_time_step(10) # => [":", 1]
#   next_time_step(20) # => [":", 10]
#   next_time_step(50) # => [":", 10]
#   next_time_step(60) # => ["1m", 1]
#   next_time_step(540) # => ["9m", 60]
#   next_time_step(600) # => ["10m", 60]
#   next_time_step(900) # => ["15m", 300]
#
# align onto regular steps:
#   next_time_step(11) # => [":", 1]
#   next_time_step(19) # => [":", 9]
#   next_time_step(61) # => ["1m", 1]
#   next_time_step(69) # => ["1m", 9]
#   next_time_step(599) # => ["9m", 59]
#   next_time_step(601) # => ["10m", 1]
#   next_time_step(899) # => ["14m", 299]
#   next_time_step(901) # => ["15m", 1]
def next_time_step(seconds)
  raise "assertion failed: seconds must be an integer.  (got #{seconds})" unless seconds.integer?
  if seconds < 10
    ["#{seconds}",
     1]
  elsif seconds < 60
    [":",
     [10, (seconds - 1) % 10 + 1, seconds - 9].min]
  elsif seconds < 600
    ["#{seconds / 60}m",
     [60, (seconds - 1) % 60 + 1, seconds - 59].min]
  else
    ["#{seconds / 60}m",
     [300, (seconds - 1) % 300 + 1, seconds - 540].min]
  end
end

#   process_argv(%w()) # => [{:dry_run=>false}, 0]
#   process_argv(%w(3)) # => [{:dry_run=>false}, 3.0]
#   process_argv(%w(3.14)) # => [{:dry_run=>false}, 3.14]
#   process_argv(%w(1 2.3 4.5)) # => [{:dry_run=>false}, 7.8]
#   process_argv(%w(2m)) # => [{:dry_run=>false}, 120.0]
#   process_argv(%w(2.5m)) # => [{:dry_run=>false}, 150.0]
#   process_argv(%w(2h)) # => [{:dry_run=>false}, 7200.0]
#   process_argv(%w(2.5h)) # => [{:dry_run=>false}, 9000.0]
#   process_argv(%w(1h 23m 45.67)) # => [{:dry_run=>false}, 5025.67]
#   process_argv(%w(-n)) # => [{:dry_run=>true}, 0]
#   process_argv(%w(--dry-run)) # => [{:dry_run=>true}, 0]
#   process_argv(%w(1 -n)) # => [{:dry_run=>true}, 1.0]
#   process_argv(%w(-n 1)) # => [{:dry_run=>true}, 1.0]
#   expect_exception() { process_argv(%w(1x)) } # => "exit (code = 1)"
#   expect_exception() { process_argv(%w(-h)) } # => "exit (code = 0)"
#   expect_exception() { process_argv(%w(--help)) } # => "exit (code = 0)"
def process_argv(argv)
  options = argv.reduce({seconds: 0, dry_run: false}) do |options, arg|
    case arg
    when /(-h|--help)/
      usage_exit(0)
    when /(-n|--dry-run)/
      options.merge({dry_run: true})
    else
      m = arg.match(%r{([0-9]*(\.[0-9]*)?)(.*)?})
      number = m[1].to_f
      suffix = m[3]
      multiplier = $suffix_to_seconds[suffix]
      unless multiplier
        valid_suffixes = $suffix_to_seconds.keys
        $stderr.puts "unknown suffix #{suffix.inspect}.  it must be one of #{valid_suffixes.inspect}" unless ENV["SLEEP_V_RDOCTEST"]
        usage_exit(1)
      end
      options.merge({seconds: options[:seconds] + number * multiplier})
    end
  end

  seconds = options.delete(:seconds)
  [options, seconds]
end

def main
  usage_exit(1) if ARGV.size < 1

  options, seconds = process_argv(ARGV)

  begin
    s = seconds - seconds.to_i
    sleep(s)
    seconds = seconds.to_i
  end

  while seconds > 0
    message, step = next_time_step(seconds)
    $stderr.write message
    sleep(step) unless options[:dry_run]
    seconds -= step
  end
end

main unless ENV["SLEEP_V_RDOCTEST"]
